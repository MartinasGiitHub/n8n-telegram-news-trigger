name: Telegram AI News (DE only)

on:
  schedule:
    - cron: '30 7 * * *'   # ~09:30 Berlin (Sommerzeit)
  workflow_dispatch:

# Fix für exit code 128 (push): Schreibrecht für den Token
permissions:
  contents: write

jobs:
  send:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - run: pip install feedparser requests

      - name: Restore state cache
        uses: actions/cache@v4
        with:
          path: .state
          key: telegram-news-cache-v1

      - name: Fetch from feeds & post (DE only, no flag)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - << 'PY'
          import os, time, html, pathlib
          import requests, feedparser

          # (URL, Sprache)
          FEEDS = [
            ("https://the-decoder.de/feed/", "DE"),
            ("https://t3n.de/news/tag/ki/feed/", "DE"),
            ("https://venturebeat.com/category/ai/feed/", "EN"),
            ("https://www.theverge.com/rss/ai-artificial-intelligence/index.xml", "EN"),
            ("https://arstechnica.com/ai/feed", "EN"),
            ("https://ai.googleblog.com/feeds/posts/default", "EN"),
          ]
          LANG_WHITELIST = {"DE"}   # Nur Deutsch

          CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
          TOKEN   = os.environ["TELEGRAM_BOT_TOKEN"]
          API_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

          state_dir = pathlib.Path(".state"); state_dir.mkdir(exist_ok=True)
          seen_file = state_dir / "seen_global.txt"
          seen = set(seen_file.read_text(encoding="utf-8").splitlines()) if seen_file.exists() else set()

          def norm_id(entry):
              for k in ("id","guid","link"):
                  if k in entry and entry[k]: return str(entry[k]).strip()
              return (entry.get("title","")+ "|" + entry.get("link","")).strip()

          def send(title, link):
              text = f"{html.escape(title)}\n{html.escape(link)}"
              data = {
                "chat_id": CHAT_ID,
                "text": text,
                "disable_web_page_preview": True,
                "parse_mode": "HTML",
              }
              r = requests.post(API_URL, data=data, timeout=20)
              r.raise_for_status()

          total = 0
          new_ids = []
          for url, lang in FEEDS:
              if lang not in LANG_WHITELIST:
                  continue
              feed = feedparser.parse(url)
              for e in reversed(feed.entries[:12]):
                  uid  = norm_id(e)
                  link = (e.get("link") or "").strip()
                  title= (e.get("title") or "").strip()
                  if not link or not title or uid in seen:
                      continue
                  try:
                      send(title, link)
                      total += 1
                      new_ids.append(uid)
                      time.sleep(1.2)
                  except Exception as ex:
                      print(f"[WARN] send failed: {title} | {link} -> {ex}")

          if new_ids:
              keep = list(seen)[-600:] + new_ids
              seen_file.write_text("\n".join(keep[-900:]), encoding="utf-8")

          print(f"Done. Sent: {total}")
          PY

      - name: Commit state only if changed
        run: |
          if [ -n "$(git status --porcelain .state)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .state
            git commit -m "update news state"
            git push
          else
            echo "No state changes."
          fi
